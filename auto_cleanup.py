#!/usr/bin/env python3
"""
Script automation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cleanup releases ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
‡πÉ‡∏ä‡πâ‡πÉ‡∏ô CI/CD ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£ build release ‡πÉ‡∏´‡∏°‡πà
"""

import os
import shutil
import re
from pathlib import Path
import json
import argparse

def get_latest_release():
    """‡∏´‡∏≤ release ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å folder releases"""
    releases_dir = Path('releases')
    if not releases_dir.exists():
        return None
    
    version_folders = []
    for folder in releases_dir.iterdir():
        if folder.is_dir() and folder.name.startswith('v'):
            version_match = re.match(r'v(\d+\.\d+\.\d+)', folder.name)
            if version_match:
                version = version_match.group(1)
                version_folders.append((version, folder))
    
    if not version_folders:
        return None
    
    version_folders.sort(key=lambda x: [int(n) for n in x[0].split('.')], reverse=True)
    return version_folders[0][1]

def auto_cleanup_releases(keep_count=1, dry_run=False):
    """Cleanup releases ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
    latest_release = get_latest_release()
    
    if not latest_release:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö releases folder")
        return
    
    releases_dir = Path('releases')
    version_folders = []
    
    # ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏° releases ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    for folder in releases_dir.iterdir():
        if folder.is_dir() and folder.name.startswith('v'):
            version_match = re.match(r'v(\d+\.\d+\.\d+)', folder.name)
            if version_match:
                version = version_match.group(1)
                version_folders.append((version, folder))
    
    if len(version_folders) <= keep_count:
        print(f"‚ú® ‡∏°‡∏µ releases {len(version_folders)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô {keep_count} ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö")
        return
    
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° version
    version_folders.sort(key=lambda x: [int(n) for n in x[0].split('.')], reverse=True)
    
    # ‡πÅ‡∏¢‡∏Å releases ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏ö
    keep_folders = version_folders[:keep_count]
    delete_folders = version_folders[keep_count:]
    
    print(f"üîç Releases ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö: {[f[1].name for f in keep_folders]}")
    print(f"üóëÔ∏è  Releases ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö: {[f[1].name for f in delete_folders]}")
    
    if dry_run:
        print("üîç Dry run mode - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏à‡∏£‡∏¥‡∏á")
        return
    
    # ‡∏•‡∏ö releases ‡πÄ‡∏Å‡πà‡∏≤
    deleted_count = 0
    for version, folder in delete_folders:
        try:
            print(f"üóëÔ∏è  ‡∏•‡∏ö {folder.name}...")
            shutil.rmtree(folder)
            deleted_count += 1
            print(f"‚úÖ ‡∏•‡∏ö {folder.name} ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö {folder.name}: {e}")
    
    print(f"\nüéâ ‡∏•‡∏ö releases ‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß {deleted_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    print(f"üìÅ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏û‡∏µ‡∏¢‡∏á: {[f[1].name for f in keep_folders]}")

def main():
    """Main function"""
    parser = argparse.ArgumentParser(description='Auto cleanup old releases')
    parser.add_argument('--keep', type=int, default=1, 
                       help='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô releases ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö (default: 1)')
    parser.add_argument('--dry-run', action='store_true',
                       help='‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏•‡∏ö‡∏à‡∏£‡∏¥‡∏á')
    parser.add_argument('--auto', action='store_true',
                       help='‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ñ‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô')
    
    args = parser.parse_args()
    
    print("üßπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£ cleanup releases ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...")
    print("=" * 60)
    
    if not args.auto:
        response = input(f"‚ö†Ô∏è  ‡∏à‡∏∞‡∏•‡∏ö releases ‡πÄ‡∏Å‡πà‡∏≤ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {args.keep} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î? (y/N): ")
        if response.lower() not in ['y', 'yes']:
            print("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£ cleanup")
            return
    
    auto_cleanup_releases(keep_count=args.keep, dry_run=args.dry_run)
    
    print("\n" + "=" * 60)
    print("üèÅ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£ cleanup releases")

if __name__ == "__main__":
    main()
