#!/usr/bin/env python3
"""
Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö releases ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏¥‡πâ‡∏á ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó version ‡πÉ‡∏´‡∏°‡πà
"""

import os
import shutil
import re
from pathlib import Path
import json

def get_current_version():
    """‡∏≠‡πà‡∏≤‡∏ô version ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å config"""
    try:
        with open('config/settings.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
            return config.get('version', '1.0.0')
    except:
        return '1.0.0'

def get_latest_release():
    """‡∏´‡∏≤ release ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å folder releases"""
    releases_dir = Path('releases')
    if not releases_dir.exists():
        return None
    
    # ‡∏´‡∏≤ folder ‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ v ‡πÅ‡∏•‡∏∞‡∏°‡∏µ version number
    version_folders = []
    for folder in releases_dir.iterdir():
        if folder.is_dir() and folder.name.startswith('v'):
            # ‡πÅ‡∏¢‡∏Å version number ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
            version_match = re.match(r'v(\d+\.\d+\.\d+)', folder.name)
            if version_match:
                version = version_match.group(1)
                version_folders.append((version, folder))
    
    if not version_folders:
        return None
    
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° version ‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î
    version_folders.sort(key=lambda x: [int(n) for n in x[0].split('.')], reverse=True)
    return version_folders[0][1]

def cleanup_old_releases():
    """‡∏•‡∏ö releases ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏¥‡πâ‡∏á ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    current_version = get_current_version()
    latest_release = get_latest_release()
    
    if not latest_release:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö releases folder")
        return
    
    print(f"üîç Version ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_version}")
    print(f"üîç Release ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {latest_release.name}")
    
    releases_dir = Path('releases')
    deleted_count = 0
    
    for folder in releases_dir.iterdir():
        if folder.is_dir() and folder.name.startswith('v'):
            if folder != latest_release:
                try:
                    print(f"üóëÔ∏è  ‡∏•‡∏ö {folder.name}...")
                    shutil.rmtree(folder)
                    deleted_count += 1
                    print(f"‚úÖ ‡∏•‡∏ö {folder.name} ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
                except Exception as e:
                    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö {folder.name}: {e}")
    
    if deleted_count > 0:
        print(f"\nüéâ ‡∏•‡∏ö releases ‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß {deleted_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        print(f"üìÅ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏û‡∏µ‡∏¢‡∏á: {latest_release.name}")
    else:
        print("\n‚ú® ‡πÑ‡∏°‡πà‡∏°‡∏µ releases ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö")

def main():
    """Main function"""
    print("üßπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö releases ‡πÄ‡∏Å‡πà‡∏≤...")
    print("=" * 50)
    
    # ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö
    response = input("‚ö†Ô∏è  ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö releases ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏¥‡πâ‡∏á? (y/N): ")
    if response.lower() not in ['y', 'yes']:
        print("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö")
        return
    
    cleanup_old_releases()
    
    print("\n" + "=" * 50)
    print("üèÅ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö releases ‡πÄ‡∏Å‡πà‡∏≤")

if __name__ == "__main__":
    main()
